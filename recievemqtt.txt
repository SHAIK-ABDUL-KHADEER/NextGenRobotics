#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h>


Servo myservo;
// Replace with your network credentials
const char* ssid = "robot";
const char* password = "12345678";


// MQTT Broker
const char* mqtt_broker = "test.mosquitto.org";
const char* topic = "sensor/ir";
const int mqtt_port = 1883;


WiFiClient espClient;
PubSubClient client(espClient);


// LED pin
const int ledPin = D2;


void callback(char* topic, byte* payload, unsigned int length) {
  // Convert payload to string
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }


  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(message);


  // Control LED based on the message
  if (message == "1") {
    digitalWrite(ledPin, HIGH); // Turn LED on
    Serial.println("LED ON");
      myservo.write(0);  
  } else if (message == "0") {
    digitalWrite(ledPin, LOW);  // Turn LED off
    Serial.println("LED OFF");
      myservo.write(180);  
  }
}


void setup() {
  Serial.begin(115200);
 myservo.attach(D4);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Initialize LED to be off


  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");


  // Set up MQTT client
  client.setServer(mqtt_broker, mqtt_port);
  client.setCallback(callback);


  // Connect to MQTT Broker
  while (!client.connected()) {
    String client_id = "esp8266-client-";
    client_id += String(WiFi.macAddress());


    if (client.connect(client_id.c_str())) {
      Serial.println("Connected to MQTT Broker!");
      client.subscribe(topic);
   
    } else {
      Serial.print("Failed to connect to MQTT Broker. State: ");
      Serial.println(client.state());
      delay(2000);
    }
  }
}


void loop() {
  client.loop();
}


